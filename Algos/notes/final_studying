Single Source, Shortest Paths

  Bellman-Ford (bottom-up DP approach)
    subproblems: length of shortest path with at most k edges
    ```
    M[u,0] = infinity for all u in V, u != v
    M[v,0] = 0

    for(k=1 : n-1) {
      for(u in V) {
        M[u,k] = min_{w:(w,u) in E} (M[w,k-1] + length(w,u))
      }
    }
    ```
    Running Time: 
      - Outer loop = O(n)
      - Inner loop = O(m)
      => Total = O(mn)

  Notes on B-F:
    - works with negative weights, but NOT negative weight cycles
    - detecting negative weight cycles: rerun B-F

  Relaxation Primitive:
    - d-hat(u): upper bound on d(u)
    - initially: d-hat(v) = 0, d-hat(u) = infinity for all u != v
    - relax(x,y): improve d-hat(y) by going through x
    ```
    relax(x,y) {
      if(d-hat(y) > d-hat(x) + length(x,y)) {
        d-hat(y) = d-hat(x) + length(x,y)
        y.parent = x
      }
    }
    ```

  Bellman-Ford (as relaxations)
    ```
    for(i=1:n) {
      foreach(u in V) {
        foreach(edge (x,u)) {
          relax(x,u)
        }
      }
    }
    ```
    Not exactly the same
      - freezing/parallelism
      - after n iterations have SSSPs, but not on each iteration


  Dijkstra's
    - intuition: "greedy starting at v"
      - BFS but with edge lengths: use priority queue (heap) instead of queue
    Pros: faster than B-F (can be super fast with appropriate data structures)
    Cons: doesn't work at all with negative edge weights

    ```
    T = emptyset
    d-hat(v) = 0
    d-hat(u) = infinity for all u != v

    while(not all nodes in T) {
      let u be node not in T with minimum d-hat(u)
      Add u to T
      foreach edge (u,x) with x not in T {
        relax(u,x)
      }
    }
    ```
    Thm:
      Throughout the algorithm:
      1. T is a shortest path tree from v to the nodes in T
      2. d-hat(u) = d(u) for every u in T

    Pf: induction on |T| (iterations of algorithm)
      Base: after first iteration (|T| = 1), added v to T with d-hat(v) = d(v) = 0
      Inductive step:
        consider iteration when u added to T, let w = u.parent
        ==> d-hat(u) = d-hat(w) + length(w,u) = d(w) + length(w,u) (induction)

        consider P actual shortest path, S path found by Dijkstra
        w' predecessor of u on P. Can't be in T
          if it was, would have d-hat(w') = d(w') by induction
          would have relaxed (w',u), so would have w' = u.parent
        x first node of P outside T, previous node y in T
        d-hat(x) <= d-hat(y) + length(y,x) = d(y) + length(y,x) < length(P) = d(u) <= d-hat(u)
        contradiction: would have chosen x before u

    Running time:
      - select node with minimum d-hat value n times
      - decrease a d-hat value at most once per relaxtion => at most m times
      - keep d-hat(u) in adjacency list: selecting min d-hat values takes O(n) time
      ==> O(n^2 + m) = O(n^2) total

      - keep d-hat values in a heap
        - insert n times
        - Extract-Min n times
        - Decrease-Key m times
        Binary Heap: O(logn) per operation (amortized)
        ==> O((m+n)logn) running time
        Fibonacci Heap: 
          Insert, Decrease-Key O(1) amortized
          Extract-Min O(logn) amortized
        ==> O(m + nlogn) running time


All pairs, shortest paths
  Floyd-Warshall (dynamic programming)
    subproblems:
      intuition: "shortest path from u to v either goes through node w or it doesn't"
      if it doesn't: shortest uses only first nodes in {1,2,...,n-1}
      if it does: consists of a path P_1 from u to w and a path P_2 from w to v, neither of which uses w (internally)
      
      subproblems: shortest path from u to v that only uses nodes in {1,2,...,k} for all u,v,k
      formally:
        given a path P u->v: "intermediate nodes" are all nodes in P other than u,v
        d^k_{ij}: distance from i to j using only i->j paths with intermediate vertices in {1,2,...,k}
        Goal: compute d^k_{ij} for all i,j,k in [n]
        Return: d^n_{ij} for all i,j in V

        d^k_{ij} = 
          length(i,j) if k = 0
          min(d^{k-1}_{ij}, d^{k-1}_{ik} + d^{k-1}_{kj}) if k >= 1

    ```
    M[i,j,0] = length(i,j) for all i,j in [n]
    for(k = 1 : n) {
      for(i = 1 : n) {
        for(j = 1 : n) {
          M[i,j,k] = min(M[i,j,k-1], M[i,k,k-1] + M[k,j,k-1])
        }
      }
    }
    ```
    Correctness:
      obvious for k=0
      For k >= 1:
        M[i,j,k] = min(M[i,j,k-1], M[i,k,k-1] + M[k,j,k-1]) (def of algorithm)
        = min(d^{k-1}_{ij}, d^{k-1}_{ik} + d^{k-1}_{kj}) (induction)
        = d^k_{ij} (optimal substructure)
    
    Running Time: O(n^3) (triple nested loop, indexes 1 to n)

  Johnson's
    new approach: can we "fix" negative weights so Dijkstra from every node works
    time would be O(n(m + nlogn)) = O(mn + n^2logn), better than Floyd-Warshall

    Vertex Reweighting
      - Let h:V->R be node weights
      - Let length_h(u,v) = length(u,v) + h(u) - h(v)
      
      Add new node s to graph, edges (s,v) for all v in V of length 0
      Run Bellman-Ford from s, then for all u in V set h(u) = d(s,u)
      * Note h(u) <= 0 for all u in V
      Remove s, run Dijkstra from every node u in V to get d_h(u,v) for all u,v in V
    
    Running Time: O(n) + O(mn) + O(n(m + nlogn)) = O(mn + n^2logn)


Minimum Spanning Trees
  Generic-MST {
    A = emptyset
    while(A not a spanning tree) {
      find an edge e safe for A
      A = A u {e}
    }
    return A
  }
  
  Need to prove that a particular edge is safe and how to find it

  Prim
    A = emptyset
    Let u be an arbitrary node and let S = {u}
    while(A not a spanning tree) {
      Find an edge {x,y} with x in S and y not in S that is light for (S,S')
      A <- A u {{x,y}}
      S <- S u {y}
    }
    return A

  Running Time:
    Trivial analysis:
    Every spanning tree has n-1 edges => n-1 iterations
    In each iteration, look through all edges to find min-weight edge crossing (S,S') => O(m) time
    => O(mn) time total
    
    Better analysis:
      Use priority queue/heap to keep track of minimum weight edge across (S,S')
      Heap of vertices in S'. Key of v is min-weight edge from v to S
        when new vertex y added to S, need to update keys of nodes adjacent to y
          happens at most m times total
