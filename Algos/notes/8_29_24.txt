Today: Asymptotics, Recurrences

Asymptotics
- Intuitively: hide constants and lower order terms since we only care about what happens "at scale" (asymptotically)
- use big-oh, big-omega, bit-theta
- big-oh
  - g(n) in O(f(n)) if there exist constants c, n0 > 0 s.t. g(n) <= cf(n) for all n > n0
  - when is g(n) in O(f(n))?
    - when there is an n0 s.t. for any n > n0, f(n) can be scaled by a factor c to be at least g(n)
  - trig functions
    - some functions don't have limits
    - therefore, big-oh is not concerned with limits, but rather with bounding functions
  - Technically: O(f(n)) is a set
  - Abuse notation: g(n) is O(f(n)) or g(n) = O(f(n))
  e.g. 2n^2 + 27 = O(n^2): set n0 = 6 and c = 3
  e.g. 2n^2 + 27 = O(n^3): same values, or n0 = 4 and c = 1
  e.g. n^3 + 2000n^2 + 2000n = O(n^3): set n0 = 10000 and c = 2

thm: 2n^2 + 27 = O(n^2)
  set c = 3. suppose 2n^2 + 27 > cn^2 = 3n^2
  => n^2 < 27 => n < 6
  => 2n^2 + 27 <= 3n^2 for all n >= 6
  set n0 = 6. then 2n^2 + 27 <= cn^2 for all n > n0. QED

- big-omega
  - g(n) in big-theta(f(n)) if there exists constants c,n0 > 0 s.t. g(n) >= cf(n) for all n > n0
  - when is g(n) in big-omega(f(n))?
    - when there is an n0 s.t. for any n > n0, f(n) can be scaled by a factor c to be at most g(n)
  e.g. 2n^2 + 27 = big-omega(n^2): set n_0 = 1 and c = 1
  e.g. 2n^2 + 27 = big-omega(n): set n_0 = 1 and c = 1
  e.g. \frac{1}{100}n^3

- big-theta
  - g(n) in big-theta(f(n)) is g(n) in O(f(n)) AND g(n) in big-omega(f(n))
  - note: constants n_0, c can be different in the pfs for O(f(n)) and big-omega(f(n))
  - equivalent def: g(n) in big-theta(f(n)) if there are constants c_1, c_2, n_0 > 0 s.t. c_1f(n) <= g(n) <= c_2f(n) for all n > n_0
  - both lower and upper bound, so asymptotic equality




Recurrences
- 
